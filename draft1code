{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "https://docs.google.com/document/d/1YYUFmIh3-fBMn7PPJwz0kj7dBXMx5rIFMs1qqpd7mzQ/edit?usp=sharing"
      ],
      "metadata": {
        "id": "oeILIRm2hkJD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install numpy pandas matplotlib scipy yfinance\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m_xuEk7IfwVl",
        "outputId": "0d25928e-d162-4f76-a0ec-5c4742149642"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.14.1)\n",
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.11/dist-packages (0.2.55)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.32.3)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.11/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.3.7)\n",
            "Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.4.6)\n",
            "Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.11/dist-packages (from yfinance) (3.17.9)\n",
            "Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.13.4)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.7)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (4.13.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2025.1.31)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load and parse the option chain files\n",
        "with open(\"/content/May 16 2025 NDAQ Option Chain.txt\") as f:\n",
        "    lines = f.read().splitlines()\n",
        "\n",
        "for i, line in enumerate(lines):\n",
        "    if line.startswith(\"Contract Name\"):\n",
        "        calls_start = i\n",
        "        break\n",
        "else:\n",
        "    # If the header is not found, raise an error\n",
        "    raise ValueError(\"Header row not found in the file.\")\n",
        "\n",
        "calls_lines = [ln for ln in lines[calls_start+1:] if ln.strip() and ln.startswith(\"NDAQ\")]\n",
        "puts_lines = [ln for ln in lines if ln.startswith(\"NDAQ250516P\")]\n",
        "# Parse IVs from Calls and Puts\n",
        "import re\n",
        "def parse_ivs(lines):\n",
        "    ivs = []\n",
        "    for ln in lines:\n",
        "        parts = ln.split()\n",
        "        iv_str = parts[-1]                    # last token is e.g. \"54.06%\"\n",
        "        if iv_str.endswith('%'):\n",
        "            ivs.append(float(iv_str[:-1]) / 100.0)\n",
        "    return ivs\n",
        "\n",
        "ivs_20250516_calls = parse_ivs(calls_lines)\n",
        "ivs_20250516_puts  = parse_ivs(puts_lines)\n",
        "# Similarly for Jan 2027 file\n",
        "with open(\"/content/January 15 2027 NDAQ Option Chain.txt\") as f:\n",
        "    lines = f.read().splitlines()\n",
        "# Skip headings and find sections\n",
        "# Use the same logic as above to find the header row in the second file.\n",
        "for i, line in enumerate(lines):\n",
        "    if line.startswith(\"Contract Name\"):\n",
        "        calls_start = i\n",
        "        break\n",
        "else:\n",
        "    # If the header is not found, raise an error\n",
        "    raise ValueError(\"Header row not found in the file.\")\n",
        "\n",
        "calls_lines = [ln for ln in lines[calls_start+1:] if ln.strip() and ln.startswith(\"NDAQ\")]\n",
        "puts_lines = [ln for ln in lines if ln.startswith(\"NDAQ270115P\")]\n",
        "ivs_20270115_calls = parse_ivs(calls_lines)\n",
        "ivs_20270115_puts  = parse_ivs(puts_lines)\n",
        "# Combine all IVs (filtering out any zero entries)\n",
        "ivs = [iv for iv in (ivs_20250516_calls + ivs_20250516_puts + ivs_20270115_calls + ivs_20270115_puts) if iv>0]\n",
        "print(ivs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NF6wn7GhfGzN",
        "outputId": "236e3ec0-765f-4188-ac8b-6b9d5b22af17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.5497999999999998, 1.3149000000000002, 0.9057999999999999, 0.7426999999999999, 0.6523, 0.39380000000000004, 0.32299999999999995, 0.2932, 0.2698, 0.271, 0.3135, 0.3106, 0.4707, 0.4902, 0.5684, 0.9619, 0.9258, 0.9365000000000001, 0.6406000000000001, 0.5508, 0.5039, 0.41409999999999997, 0.374, 0.3555, 0.3259, 0.32299999999999995, 0.5435, 0.3579, 0.46, 0.561, 0.9258, 0.9365000000000001, 0.6406000000000001, 0.5508, 0.5039, 0.41409999999999997, 0.374, 0.3555, 0.3259, 0.32299999999999995, 0.5435, 0.3579, 0.46, 0.561, 0.8062, 0.6717, 0.4594, 0.353, 0.33549999999999996, 0.3613, 0.3347, 0.3104, 0.3038, 0.3239, 0.3261, 0.33659999999999995, 0.3274, 0.3063, 0.0313, 0.2731, 0.2608, 0.30829999999999996, 0.3115, 0.2709, 0.3674, 0.247, 0.4456, 0.5912, 0.4746, 0.4382, 0.3588, 0.2961, 0.2755, 0.0313, 0.2064, 0.31, 0.24, 0.2716, 0.23070000000000002, 0.244, 0.2552, 0.2487, 0.4456, 0.5912, 0.4746, 0.4382, 0.3588, 0.2961, 0.2755, 0.0313, 0.2064, 0.31, 0.24, 0.2716, 0.23070000000000002, 0.244, 0.2552, 0.2487]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "log_ivs = np.log(ivs)\n",
        "mu_est = log_ivs.mean()   # estimate of stationary mean\n",
        "var_est = log_ivs.var()   # stationary variance ≈ sigma^2/(2θ)\n",
        "print(\"Estimated mean(log IV) =\", mu_est, \"  var =\", var_est)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5qEBcPmigLWv",
        "outputId": "4d177428-eec4-4c25-9df2-8a2a5932b258"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimated mean(log IV) = -1.002628414049227   var = 0.3660564454674626\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "theta = 1.0   # reversion rate (yr^-1)\n",
        "mu    = mu_est  # target mean from above\n",
        "sigma = np.sqrt(2*theta*var_est)  # match stationary variance\n",
        "\n",
        "# Initial distribution at Nov 3, 2023: say mean = -1.002628414049227, var = 0.3660564454674626\n",
        "Nsim = 100000\n",
        "X = np.random.normal(-1.002628414049227, 0.3660564454674626, size=Nsim) #(mean,var)\n",
        "\n",
        "T_years = 0.74   # 269 days ~ 0.74 years to July 29, 2024\n",
        "dt = 1/252       # one trading day\n",
        "steps = int(T_years/dt)\n",
        "snapshots = []\n",
        "times = []\n",
        "for i in range(steps):\n",
        "    dW = np.random.randn(Nsim)*np.sqrt(dt)\n",
        "    # OU Euler step\n",
        "    X += theta*(mu - X)*dt + sigma * dW\n",
        "    # record distribution at periodic dates\n",
        "    if i in {30,60,90,120,150,steps-1}:\n",
        "        snapshots.append(X.copy())\n",
        "        times.append((i+1)*dt)\n",
        "\n",
        "# Example: compute mean and std of log-IV at each snapshot\n",
        "for t,Xs in zip(times, snapshots):\n",
        "    print(f\"t={t:.2f}yr: mean={Xs.mean():.3f}, std={Xs.std():.3f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4j4j83BHgTt2",
        "outputId": "63673947-8871-4453-8395-b31a586ea663"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "t=0.12yr: mean=-1.003, std=0.430\n",
            "t=0.24yr: mean=-1.002, std=0.474\n",
            "t=0.36yr: mean=-1.002, std=0.503\n",
            "t=0.48yr: mean=-1.000, std=0.526\n",
            "t=0.60yr: mean=-1.001, std=0.544\n",
            "t=0.74yr: mean=-1.003, std=0.560\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Example: plot densities at two dates in log-IV space\n",
        "for Xs,t in zip(snapshots, times):\n",
        "    vals, bins = np.histogram(Xs, bins=50, density=True)\n",
        "    mid = (bins[:-1]+bins[1:])/2\n",
        "    plt.plot(mid, vals, label=f\"t={t:.2f}yr\")\n",
        "plt.xlabel(\"log(IV)\"); plt.ylabel(\"Density\"); plt.legend(); plt.show()\n",
        "\n",
        "# In IV space: use exp(X)\n",
        "for Xs,t in zip(snapshots, times):\n",
        "    Vs = np.exp(Xs)\n",
        "    vals, bins = np.histogram(Vs, bins=50, density=True)\n",
        "    mid = (bins[:-1]+bins[1:])/2\n",
        "    plt.plot(mid, vals, label=f\"t={t:.2f}yr\")\n",
        "plt.xlabel(\"Implied Volatility\"); plt.ylabel(\"Density\"); plt.legend(); plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 881
        },
        "id": "j2hKiMmig__w",
        "outputId": "0753a842-77af-4baa-8b36-f183f1f2fb0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.integrate import solve_ivp\n",
        "from scipy.stats import norm\n",
        "\n",
        "# -- 1. Fit the expOU model to implied vols --\n",
        "\n",
        "log_iv = np.log(np.array(ivs))\n",
        "log_iv_diff = np.diff(log_iv)\n",
        "\n",
        "m_hat = np.std(log_iv_diff)\n",
        "Y_t = np.log(np.abs(log_iv_diff) / m_hat)\n",
        "Y_t_lag = Y_t[:-1]\n",
        "Y_t_next = Y_t[1:]\n",
        "alpha_hat = -np.polyfit(Y_t_lag, Y_t_next - Y_t_lag, 1)[0]\n",
        "k_hat = np.std(Y_t_next - (Y_t_lag + (-alpha_hat * Y_t_lag)))\n",
        "params = {'m': m_hat, 'alpha': alpha_hat, 'k': k_hat}\n",
        "\n",
        "print(\"expOU Parameters:\", params)\n",
        "\n",
        "# -- 2. Fokker-Planck (time-reversed) setup --\n",
        "\n",
        "x = np.linspace(-2.5, 2.5, 200)  # log(IV) grid\n",
        "dx = x[1] - x[0]\n",
        "T = 1.0  # simulate 1 unit back in time\n",
        "Nt = 100\n",
        "dt = T / Nt\n",
        "time = np.linspace(0, T, Nt)\n",
        "\n",
        "# Initial density = Gaussian around log(mean_IV)\n",
        "mean_log_iv = np.mean(log_iv)\n",
        "rho0 = norm.pdf(x, loc=mean_log_iv, scale=0.3)\n",
        "rho0 /= np.trapz(rho0, x)\n",
        "\n",
        "# Time-reversed Fokker-Planck PDE\n",
        "def fokker_planck_reverse(t, rho):\n",
        "    d_rho_dx = np.gradient(rho, dx)\n",
        "    d2_rho_dx2 = np.gradient(d_rho_dx, dx)\n",
        "    drift = -params['alpha'] * x  # reversal means same drift sign\n",
        "    diffusion = 0.5 * params['k']**2\n",
        "    rhs = drift * d_rho_dx - diffusion * d2_rho_dx2\n",
        "    return rhs\n",
        "\n",
        "# Solve backward\n",
        "sol = solve_ivp(fokker_planck_reverse, [T, 0], rho0, t_eval=time[::-1], method='RK45')\n",
        "\n",
        "# -- 3. Monte Carlo simulation of IV paths using expOU --\n",
        "\n",
        "n_paths = 500\n",
        "n_days = Nt\n",
        "paths = np.zeros((n_paths, n_days))\n",
        "paths[:, 0] = np.exp(mean_log_iv)\n",
        "\n",
        "for i in range(n_paths):\n",
        "    Y = 0\n",
        "    for t in range(1, n_days):\n",
        "        Y += -params['alpha'] * Y + params['k'] * np.random.normal()\n",
        "        sigma = params['m'] * np.exp(Y)\n",
        "        paths[i, t] = paths[i, t-1] * np.exp(np.random.normal(0, sigma))\n",
        "\n",
        "# -- 4. Plotting --\n",
        "\n",
        "# Density evolution\n",
        "plt.figure(figsize=(10, 6))\n",
        "for i in range(0, len(time), 10):\n",
        "    plt.plot(x, sol.y[:, i], label=f\"t={T - time[i]:.2f}\", alpha=0.6)\n",
        "plt.title(\"Time-Reversed Fokker-Planck Evolution (log IV)\")\n",
        "plt.xlabel(\"log(IV)\")\n",
        "plt.ylabel(\"Density\")\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Monte Carlo paths\n",
        "plt.figure(figsize=(10, 5))\n",
        "for i in range(min(n_paths, 50)):\n",
        "    plt.plot(np.arange(n_days), paths[i], alpha=0.3)\n",
        "plt.title(\"Monte Carlo Simulated Implied Vol Paths (expOU)\")\n",
        "plt.xlabel(\"Time Steps (backward)\")\n",
        "plt.ylabel(\"Implied Volatility\")\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "u0BD9J9hnwaA",
        "outputId": "13b1c0a2-a4ca-47b2-a589-247403411a27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "expOU Parameters: {'m': np.float64(0.5713823381462453), 'alpha': np.float64(0.7898683260217632), 'k': np.float64(1.2912431622300702)}\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-07eae6dd04ff>:33: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.\n",
            "  rho0 /= np.trapz(rho0, x)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code fits expOU to IV data extracted from your option chains.\n",
        "\n",
        "It uses a time-reversed Fokker-Planck to simulate how the density of implied volatility may have looked in the past.\n",
        "\n",
        "It Monte Carlo simulates IV paths, offering a stochastic view of how vol could’ve evolved.\n",
        "\n",
        "first chart: The x-axis is time steps, going backward from the present to earlier dates.\n",
        "\n",
        "The y-axis is simulated implied volatility values.\n",
        "\n",
        "t = 0.00 → April 25, 2025\n",
        "\n",
        "t = 0.10 → ~Feb 11, 2025\n",
        "\n",
        "t = 0.20 → ~Dec 30, 2024\n",
        "\n",
        "t = 0.30 → ~Nov 13, 2024\n",
        "\n",
        "t = 0.40 → ~Sep 26, 2024\n",
        "\n",
        "t = 0.50 → ~Aug 8, 2024\n",
        "\n",
        "t = 0.60 → ~Jun 21, 2024\n",
        "\n",
        "t = 0.70 → ~May 6, 2024\n",
        "\n",
        "t = 0.80 → ~Mar 20, 2024\n",
        "\n",
        "t = 0.90 → ~Feb 1, 2024\n",
        "\n",
        "t = 1.00 → Nov 3, 2023"
      ],
      "metadata": {
        "id": "z-M02U7coPZh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Right side (t=0.09 to 0.30 → Recent Past):\n",
        "\n",
        "Density is wide and low → implies the market had uncertainty about volatility.\n",
        "\n",
        "That suggests shallower market depth — harder to hedge, wide spreads, lower liquidity.\n",
        "\n",
        "Left side (t=0.70 to 1.00 → 2024 → 2023):\n",
        "\n",
        "Density becomes taller and narrower, peaking around log(IV) ≈ −1 (or IV ≈ 0.37).\n",
        "\n",
        "Implies more consensus and lower perceived risk in that past regime.\n",
        "\n",
        "Suggests deeper market, more confidence in pricing/hedging"
      ],
      "metadata": {
        "id": "5HC3w2YBoP9P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install scipy\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iBTf0Uo07ZQ1",
        "outputId": "eca4e8a3-decd-4711-b8c9-c5f4ec4e8207"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.14.1)\n",
            "Requirement already satisfied: numpy<2.3,>=1.23.5 in /usr/local/lib/python3.11/dist-packages (from scipy) (2.0.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import yfinance as yf\n",
        "from scipy.integrate import solve_ivp\n",
        "\n",
        "\n",
        "\n",
        "# -------------------------------\n",
        "# Load your IVs from earlier\n",
        "ivs = [...]  # <-- your parsed implied volatilities list here\n",
        "\n",
        "# 1. Fit expOU to your implied volatilities\n",
        "log_ivs = np.log(np.array(ivs) + 1e-6)  # small shift to avoid log(0)\n",
        "log_ivs_diff = np.diff(log_ivs)\n",
        "\n",
        "m_hat = np.std(log_ivs_diff)\n",
        "Y_t = np.log(np.abs(log_ivs_diff) / m_hat + 1e-6)\n",
        "Y_t_lag = Y_t[:-1]\n",
        "Y_t_next = Y_t[1:]\n",
        "alpha_hat = -np.polyfit(Y_t_lag, Y_t_next - Y_t_lag, 1)[0]\n",
        "k_hat = np.std(Y_t_next - (Y_t_lag + -alpha_hat * Y_t_lag))\n",
        "params = {'m': m_hat, 'alpha': alpha_hat, 'k': k_hat}\n",
        "\n",
        "print(\"expOU Model Parameters:\", params)\n",
        "\n",
        "# -------------------------------\n",
        "# 2. Download VXN for backtest period\n",
        "vxn = yf.download(\"^VXN\", start=\"2023-11-03\", end=\"2024-07-29\")['Close'].dropna()\n",
        "vxn_dates = vxn.index\n",
        "vxn_values = vxn.values\n",
        "\n",
        "# Log VXN (for matching scale)\n",
        "log_vxn = np.log(vxn_values + 1e-6)\n",
        "\n",
        "# -------------------------------\n",
        "# 3. Fokker-Planck simulation (time-reversed)\n",
        "\n",
        "# Grid\n",
        "x = np.linspace(-2, 2, 200)  # log-vol space\n",
        "dx = x[1] - x[0]\n",
        "T = 1.0\n",
        "Nt = len(vxn_dates)\n",
        "dt = T / Nt\n",
        "times = np.linspace(0, T, Nt)\n",
        "\n",
        "# Initial density (Gaussian)\n",
        "rho0 = np.exp(-x**2 / 0.05)\n",
        "rho0 /= np.trapz(rho0, x)\n",
        "\n",
        "def fokker_planck_reverse(t, rho):\n",
        "    rho = rho.reshape(-1)\n",
        "    d_rho_dx = np.gradient(rho, dx)\n",
        "    d2_rho_dx2 = np.gradient(d_rho_dx, dx)\n",
        "    drift = -params['alpha'] * x\n",
        "    diffusion = 0.5 * params['k']**2\n",
        "    rhs = drift * d_rho_dx - diffusion * d2_rho_dx2  # Time-reversed\n",
        "    return rhs\n",
        "\n",
        "# Solve PDE\n",
        "sol = solve_ivp(fokker_planck_reverse, [0, T], rho0, t_eval=times, method='RK45')\n",
        "\n",
        "# -------------------------------\n",
        "# 4. Extract model implied volatilities\n",
        "\n",
        "# For each time step, take the mean of the implied vol (in log space), then exp() back\n",
        "model_log_ivs = []\n",
        "for i in range(Nt):\n",
        "    density = sol.y[:, i]\n",
        "    density /= np.trapz(density, x)\n",
        "    expected_log_iv = np.trapz(x * density, x)\n",
        "    model_log_ivs.append(expected_log_iv)\n",
        "\n",
        "model_ivs = np.exp(model_log_ivs)  # back to normal implied vol\n",
        "\n",
        "# -------------------------------\n",
        "# 5. Plot actual VXN vs model output\n",
        "\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.plot(vxn_dates, vxn_values, label='Actual VXN', color='black')\n",
        "plt.plot(vxn_dates, model_ivs * 100, label='Model Implied Vol', linestyle='--', color='blue')  # *100 to match %\n",
        "plt.title(\"Backtest: VXN vs Model Implied Vol\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Implied Volatility\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# -------------------------------\n",
        "# 6. Calculate backtest error (optional)\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "mse = mean_squared_error(vxn_values, model_ivs * 100)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Backtest RMSE: {rmse:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "id": "bLS5lpp26u3g",
        "outputId": "6754edec-1052-41f1-9974-ee7d5a124751"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "unsupported operand type(s) for +: 'ellipsis' and 'float'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-c6711cfd12ce>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# 1. Fit expOU to your implied volatilities\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mlog_ivs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mivs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1e-6\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# small shift to avoid log(0)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mlog_ivs_diff\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiff\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlog_ivs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'ellipsis' and 'float'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load and parse the option chain files\n",
        "with open(\"/content/May 16 2025 NDAQ Option Chain.txt\") as f:\n",
        "    lines = f.read().splitlines()\n",
        "\n",
        "for i, line in enumerate(lines):\n",
        "    if line.startswith(\"Contract Name\"):\n",
        "        calls_start = i\n",
        "        break\n",
        "else:\n",
        "    # If the header is not found, raise an error\n",
        "    raise ValueError(\"Header row not found in the file.\")\n",
        "\n",
        "calls_lines = [ln for ln in lines[calls_start+1:] if ln.strip() and ln.startswith(\"NDAQ\")]\n",
        "puts_lines = [ln for ln in lines if ln.startswith(\"NDAQ250516P\")]\n",
        "# Parse IVs from Calls and Puts\n",
        "import re\n",
        "def parse_ivs(lines):\n",
        "    ivs = []\n",
        "    for ln in lines:\n",
        "        parts = ln.split()\n",
        "        iv_str = parts[-1]                    # last token is e.g. \"54.06%\"\n",
        "        if iv_str.endswith('%'):\n",
        "            ivs.append(float(iv_str[:-1]) / 100.0)\n",
        "    return ivs\n",
        "\n",
        "ivs_20250516_calls = parse_ivs(calls_lines)\n",
        "ivs_20250516_puts  = parse_ivs(puts_lines)\n",
        "# Similarly for Jan 2027 file\n",
        "with open(\"/content/January 15 2027 NDAQ Option Chain.txt\") as f:\n",
        "    lines = f.read().splitlines()\n",
        "# Skip headings and find sections\n",
        "# Use the same logic as above to find the header row in the second file.\n",
        "for i, line in enumerate(lines):\n",
        "    if line.startswith(\"Contract Name\"):\n",
        "        calls_start = i\n",
        "        break\n",
        "else:\n",
        "    # If the header is not found, raise an error\n",
        "    raise ValueError(\"Header row not found in the file.\")\n",
        "\n",
        "calls_lines = [ln for ln in lines[calls_start+1:] if ln.strip() and ln.startswith(\"NDAQ\")]\n",
        "puts_lines = [ln for ln in lines if ln.startswith(\"NDAQ270115P\")]\n",
        "ivs_20270115_calls = parse_ivs(calls_lines)\n",
        "ivs_20270115_puts  = parse_ivs(puts_lines)\n",
        "# Combine all IVs (filtering out any zero entries)\n",
        "ivs = [iv for iv in (ivs_20250516_calls + ivs_20250516_puts + ivs_20270115_calls + ivs_20270115_puts) if iv>0]\n",
        "print(ivs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "236e3ec0-765f-4188-ac8b-6b9d5b22af17",
        "id": "QkNdzAZW8KR0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.5497999999999998, 1.3149000000000002, 0.9057999999999999, 0.7426999999999999, 0.6523, 0.39380000000000004, 0.32299999999999995, 0.2932, 0.2698, 0.271, 0.3135, 0.3106, 0.4707, 0.4902, 0.5684, 0.9619, 0.9258, 0.9365000000000001, 0.6406000000000001, 0.5508, 0.5039, 0.41409999999999997, 0.374, 0.3555, 0.3259, 0.32299999999999995, 0.5435, 0.3579, 0.46, 0.561, 0.9258, 0.9365000000000001, 0.6406000000000001, 0.5508, 0.5039, 0.41409999999999997, 0.374, 0.3555, 0.3259, 0.32299999999999995, 0.5435, 0.3579, 0.46, 0.561, 0.8062, 0.6717, 0.4594, 0.353, 0.33549999999999996, 0.3613, 0.3347, 0.3104, 0.3038, 0.3239, 0.3261, 0.33659999999999995, 0.3274, 0.3063, 0.0313, 0.2731, 0.2608, 0.30829999999999996, 0.3115, 0.2709, 0.3674, 0.247, 0.4456, 0.5912, 0.4746, 0.4382, 0.3588, 0.2961, 0.2755, 0.0313, 0.2064, 0.31, 0.24, 0.2716, 0.23070000000000002, 0.244, 0.2552, 0.2487, 0.4456, 0.5912, 0.4746, 0.4382, 0.3588, 0.2961, 0.2755, 0.0313, 0.2064, 0.31, 0.24, 0.2716, 0.23070000000000002, 0.244, 0.2552, 0.2487]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import yfinance as yf\n",
        "from scipy.integrate import solve_ivp\n",
        "\n",
        "# -------------------------------\n",
        "# Load your IVs from earlier\n",
        "ivs = [1.5497999999999998, 1.3149000000000002, 0.9057999999999999, 0.7426999999999999, 0.6523, 0.39380000000000004, 0.32299999999999995, 0.2932, 0.2698, 0.271, 0.3135, 0.3106, 0.4707, 0.4902, 0.5684, 0.9619, 0.9258, 0.9365000000000001, 0.6406000000000001, 0.5508, 0.5039, 0.41409999999999997, 0.374, 0.3555, 0.3259, 0.32299999999999995, 0.5435, 0.3579, 0.46, 0.561, 0.9258, 0.9365000000000001, 0.6406000000000001, 0.5508, 0.5039, 0.41409999999999997, 0.374, 0.3555, 0.3259, 0.32299999999999995, 0.5435, 0.3579, 0.46, 0.561, 0.8062, 0.6717, 0.4594, 0.353, 0.33549999999999996, 0.3613, 0.3347, 0.3104, 0.3038, 0.3239, 0.3261, 0.33659999999999995, 0.3274, 0.3063, 0.0313, 0.2731, 0.2608, 0.30829999999999996, 0.3115, 0.2709, 0.3674, 0.247, 0.4456, 0.5912, 0.4746, 0.4382, 0.3588, 0.2961, 0.2755, 0.0313, 0.2064, 0.31, 0.24, 0.2716, 0.23070000000000002, 0.244, 0.2552, 0.2487, 0.4456, 0.5912, 0.4746, 0.4382, 0.3588, 0.2961, 0.2755, 0.0313, 0.2064, 0.31, 0.24, 0.2716, 0.23070000000000002, 0.244, 0.2552, 0.2487]  # <-- your parsed implied volatilities list here\n",
        "\n",
        "# 1. Fit expOU to your implied volatilities\n",
        "log_ivs = np.log(np.array(ivs) + 1e-6)  # small shift to avoid log(0)\n",
        "log_ivs_diff = np.diff(log_ivs)\n",
        "\n",
        "m_hat = np.std(log_ivs_diff)\n",
        "Y_t = np.log(np.abs(log_ivs_diff) / m_hat + 1e-6)\n",
        "Y_t_lag = Y_t[:-1]\n",
        "Y_t_next = Y_t[1:]\n",
        "alpha_hat = -np.polyfit(Y_t_lag, Y_t_next - Y_t_lag, 1)[0]\n",
        "k_hat = np.std(Y_t_next - (Y_t_lag + -alpha_hat * Y_t_lag))\n",
        "params = {'m': m_hat, 'alpha': alpha_hat, 'k': k_hat}\n",
        "\n",
        "print(\"expOU Model Parameters:\", params)\n",
        "\n",
        "# -------------------------------\n",
        "# 2. Download VXN for backtest period\n",
        "vxn = yf.download(\"^VXN\", start=\"2023-11-03\", end=\"2024-07-29\")['Close'].dropna()\n",
        "vxn_dates = vxn.index\n",
        "vxn_values = vxn.values\n",
        "\n",
        "# Log VXN (for matching scale)\n",
        "log_vxn = np.log(vxn_values + 1e-6)\n",
        "\n",
        "# -------------------------------\n",
        "# 3. Fokker-Planck simulation (time-reversed)\n",
        "\n",
        "# Grid\n",
        "x = np.linspace(-2, 2, 200)  # log-vol space\n",
        "dx = x[1] - x[0]\n",
        "T = 1.0\n",
        "Nt = len(vxn_dates)\n",
        "dt = T / Nt\n",
        "times = np.linspace(0, T, Nt)\n",
        "\n",
        "# Initial density (Gaussian)\n",
        "rho0 = np.exp(-x**2 / 0.05)\n",
        "rho0 /= np.trapz(rho0, x)\n",
        "\n",
        "def fokker_planck_reverse(t, rho):\n",
        "    rho = rho.reshape(-1)\n",
        "    d_rho_dx = np.gradient(rho, dx)\n",
        "    d2_rho_dx2 = np.gradient(d_rho_dx, dx)\n",
        "    drift = -params['alpha'] * x\n",
        "    diffusion = 0.5 * params['k']**2\n",
        "    rhs = drift * d_rho_dx - diffusion * d2_rho_dx2  # Time-reversed\n",
        "    return rhs\n",
        "\n",
        "# Solve PDE\n",
        "sol = solve_ivp(fokker_planck_reverse, [0, T], rho0, t_eval=times, method='RK45')\n",
        "\n",
        "# -------------------------------\n",
        "# 4. Extract model implied volatilities\n",
        "\n",
        "# For each time step, take the mean of the implied vol (in log space), then exp() back\n",
        "model_log_ivs = []\n",
        "for i in range(Nt):\n",
        "    density = sol.y[:, i]\n",
        "    density /= np.trapz(density, x)\n",
        "    expected_log_iv = np.trapz(x * density, x)\n",
        "    model_log_ivs.append(expected_log_iv)\n",
        "\n",
        "model_ivs = np.exp(model_log_ivs)  # back to normal implied vol\n",
        "\n",
        "# -------------------------------\n",
        "# 5. Plot actual VXN vs model output\n",
        "\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.plot(vxn_dates, vxn_values, label='Actual VXN', color='black')\n",
        "plt.plot(vxn_dates, model_ivs * 100, label='Model Implied Vol', linestyle='--', color='blue')  # *100 to match %\n",
        "plt.title(\"Backtest: VXN vs Model Implied Vol\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Implied Volatility\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# -------------------------------\n",
        "# 6. Calculate backtest error (optional)\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "mse = mean_squared_error(vxn_values, model_ivs * 100)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Backtest RMSE: {rmse:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "id": "IjPoVlk38oTH",
        "outputId": "d395cb90-b683-4108-8e2d-c490ea07f912"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "expOU Model Parameters: {'m': np.float64(0.5713757592199536), 'alpha': np.float64(0.7898655557178076), 'k': np.float64(1.2912265471659479)}\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-17-fff75ca2deec>:47: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.\n",
            "  rho0 /= np.trapz(rho0, x)\n",
            "/usr/local/lib/python3.11/dist-packages/numpy/lib/_function_base_impl.py:1241: RuntimeWarning: invalid value encountered in subtract\n",
            "  out[tuple(slice1)] = (f[tuple(slice4)] - f[tuple(slice2)]) / (2. * ax_dx)\n",
            "<ipython-input-17-fff75ca2deec>:55: RuntimeWarning: invalid value encountered in subtract\n",
            "  rhs = drift * d_rho_dx - diffusion * d2_rho_dx2  # Time-reversed\n",
            "<ipython-input-17-fff75ca2deec>:68: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.\n",
            "  density /= np.trapz(density, x)\n",
            "<ipython-input-17-fff75ca2deec>:69: DeprecationWarning: `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.\n",
            "  expected_log_iv = np.trapz(x * density, x)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "index 66 is out of bounds for axis 1 with size 66",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-fff75ca2deec>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0mmodel_log_ivs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m     \u001b[0mdensity\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0mdensity\u001b[0m \u001b[0;34m/=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrapz\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdensity\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m     \u001b[0mexpected_log_iv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrapz\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mdensity\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: index 66 is out of bounds for axis 1 with size 66"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3FxZF3J4crWJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import yfinance as yf\n",
        "from scipy.integrate import solve_ivp\n",
        "\n",
        "\n",
        "\n",
        "# 1. Fit expOU to your implied volatilities\n",
        "log_ivs = np.log(np.array(ivs) + 1e-6)  # small shift to avoid log(0)\n",
        "log_ivs_diff = np.diff(log_ivs)\n",
        "\n",
        "m_hat = np.std(log_ivs_diff)\n",
        "Y_t = np.log(np.abs(log_ivs_diff) / m_hat + 1e-6)\n",
        "Y_t_lag = Y_t[:-1]\n",
        "Y_t_next = Y_t[1:]\n",
        "alpha_hat = -np.polyfit(Y_t_lag, Y_t_next - Y_t_lag, 1)[0]\n",
        "k_hat = np.std(Y_t_next - (Y_t_lag + -alpha_hat * Y_t_lag))\n",
        "params = {'m': m_hat, 'alpha': alpha_hat, 'k': k_hat}\n",
        "\n",
        "print(\"expOU Model Parameters:\", params)\n",
        "\n",
        "# -------------------------------\n",
        "# 2. Download VXN for backtest period\n",
        "vxn = yf.download(\"^VXN\", start=\"2023-11-03\", end=\"2024-07-29\")['Close'].dropna()\n",
        "vxn_dates = vxn.index\n",
        "vxn_values = vxn.values\n",
        "\n",
        "# Log VXN (for matching scale)\n",
        "log_vxn = np.log(vxn_values + 1e-6)\n",
        "\n",
        "# -------------------------------\n",
        "# 3. Fokker-Planck simulation (time-reversed)\n",
        "\n",
        "# Grid\n",
        "x = np.linspace(-2, 2, 200)  # log-vol space\n",
        "dx = x[1] - x[0]\n",
        "T = 1.0\n",
        "Nt = len(vxn_dates)\n",
        "dt = T / Nt\n",
        "times = np.linspace(0, T, Nt)\n",
        "\n",
        "# Initial density (Gaussian)\n",
        "rho0 = np.exp(-x**2 / 0.05)\n",
        "rho0 /= np.trapz(rho0, x)\n",
        "\n",
        "def fokker_planck_reverse(t, rho):\n",
        "    rho = rho.reshape(-1)\n",
        "    d_rho_dx = np.gradient(rho, dx)\n",
        "    d2_rho_dx2 = np.gradient(d_rho_dx, dx)\n",
        "    drift = -params['alpha'] * x\n",
        "    diffusion = 0.5 * params['k']**2\n",
        "    rhs = drift * d_rho_dx - diffusion * d2_rho_dx2  # Time-reversed\n",
        "    return rhs\n",
        "\n",
        "# Solve PDE\n",
        "sol = solve_ivp(fokker_planck_reverse, [0, T], rho0, t_eval=times, method='RK45')\n",
        "\n",
        "# -------------------------------\n",
        "# 4. Extract model implied volatilities\n",
        "\n",
        "# For each time step, take the mean of the implied vol (in log space), then exp() back\n",
        "model_log_ivs = []\n",
        "for i in range(Nt):\n",
        "    density = sol.y[:, i]\n",
        "    density /= np.trapz(density, x)\n",
        "    expected_log_iv = np.trapz(x * density, x)\n",
        "    model_log_ivs.append(expected_log_iv)\n",
        "\n",
        "model_ivs = np.exp(model_log_ivs)  # back to normal implied vol\n",
        "\n",
        "# -------------------------------\n",
        "# 5. Plot actual VXN vs model output\n",
        "\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.plot(vxn_dates, vxn_values, label='Actual VXN', color='black')\n",
        "plt.plot(vxn_dates, model_ivs * 100, label='Model Implied Vol', linestyle='--', color='blue')  # *100 to match %\n",
        "plt.title(\"Backtest: VXN vs Model Implied Vol\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Implied Volatility\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# -------------------------------\n",
        "# 6. Calculate backtest error (optional)\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "mse = mean_squared_error(vxn_values, model_ivs * 100)\n",
        "rmse = np.sqrt(mse)\n",
        "print(f\"Backtest RMSE: {rmse:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "id": "O6LKbJtt6aQg",
        "outputId": "4be3d2f1-0cd8-411c-def4-2448db1c5e94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'ivs' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-4da7a55e8b97>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# 1. Fit expOU to your implied volatilities\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mlog_ivs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mivs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1e-6\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# small shift to avoid log(0)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mlog_ivs_diff\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiff\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlog_ivs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'ivs' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Tail density\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Equity prices data (replace with actual data)\n",
        "prices = np.array([\n",
        " 583.09, 582.86, 592.85, 594.85, 594.20, 590.46, 587.59, 586.84, 582.99, 564.34, 565.06, 561.15, 558.80, 563.51, 566.76, 558.47, 554.54, 554.32, 550.85, 550.64, 546.69, 535.42, 527.25, 513.88, 526.41, 525.66, 537.61, 539.12, 533.94, 524.58, 548.62, 496.48, 504.38, 505.28, 536.70, 564.52, 560.97, 559.39, 555.66, 567.08, 568.59, 575.46, 574.08, 563.98, 563.79, 565.43, 559.34, 565.45, 561.12, 549.77, 557.19, 554.25, 558.90, 574.19, 570.99, 581.31, 575.13, 582.02, 592.40, 583.30, 592.76, 592.46, 595.42, 598.14, 608.55, 611.09, 609.66, 607.87, 607.90, 601.55, 603.49, 603.04, 598.97, 604.50, 602.41, 599.98, 595.98, 600.02, 603.23, 600.01, 602.71, 597.57, 606.15, 607.92, 604.62, 601.24, 595.79, 589.87, 591.00, 580.44, 579.65, 578.75, 587.72, 586.86, 593.57, 590.17, 582.89   ])\n",
        "\n",
        "# Step 1: Calculate the daily returns\n",
        "returns = np.diff(prices) / prices[:-1]  # Corrected returns calculation\n",
        "\n",
        "# Step 2: Calculate the 1st and 99th percentiles for tail density estimation\n",
        "lower_percentile = np.percentile(returns, 1)\n",
        "upper_percentile = np.percentile(returns, 99)\n",
        "\n",
        "# Step 3: Calculate the mean and standard deviation\n",
        "mean_return = np.mean(returns)\n",
        "std_return = np.std(returns)\n",
        "\n",
        "# Step 4: Calculate tail density using the normal distribution PDF formula\n",
        "def normal_pdf(x, mean, std):\n",
        "    return (1 / (std * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n",
        "\n",
        "# Calculate tail density at the 1st and 99th percentiles\n",
        "tail_density_lower = normal_pdf(lower_percentile, mean_return, std_return)\n",
        "tail_density_upper = normal_pdf(upper_percentile, mean_return, std_return)\n",
        "\n",
        "# Output the tail density values\n",
        "print(f\"Tail density at 1st percentile: {tail_density_lower:.6f}\")\n",
        "print(f\"Tail density at 99th percentile: {tail_density_upper:.6f}\")\n",
        "\n",
        "# Step 5: Plot the return distribution with the tails highlighted\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(returns, bins=50, alpha=0.75, label='Return Distribution', color='blue')\n",
        "plt.axvline(x=lower_percentile, color='red', linestyle='--', label=f'1st Percentile ({lower_percentile*100:.2f}%)')\n",
        "plt.axvline(x=upper_percentile, color='green', linestyle='--', label=f'99th Percentile ({upper_percentile*100:.2f}%)')\n",
        "plt.title(\"Stock Returns Distribution with Tail Density\")\n",
        "plt.xlabel(\"Returns\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "EcUYGIwtsLhR"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
